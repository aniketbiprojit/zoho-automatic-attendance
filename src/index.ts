// Generated by Selenium IDE
import { Builder, By, Key, logging, WebDriver } from 'selenium-webdriver'

import { config } from 'dotenv'
import { join } from 'path'
import { Options } from 'selenium-webdriver/chrome.js'

const { Type } = logging

console.log(Type)
config({
	path: join(__dirname, '..', '.env'),
})

const executionStatus = process.env.EXECUTION_STATUS ?? ''

const handleLogs = (entries: logging.Entry[]) => {
	entries = entries.sort((a, b) => a.timestamp - b.timestamp)
	for (let index = 0; index < entries.length; index++) {
		const entry = entries[index]
		console.log(entry)
	}
}

const sleep = async (timeout = 3000) => {
	return await new Promise((resolve) => setTimeout(resolve, timeout))
}
const run = async () => {
	const options = new Options()

	// options.addArguments('--headless')
	;['--incognito', '--js-flags=--expose-gc'].forEach(function (v) {
		options.addArguments(v)
	})
	options.setLoggingPrefs({ performance: 'ALL', browser: 'ALL', client: 'ALL' })

	const driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build()
	try {
		await driver.get(
			'https://accounts.zoho.in/signin?servicename=zohopeople&signupurl=https://www.zoho.in/people/signup.html'
		)
		await driver.manage().window().setRect({ width: 1440, height: 900 })
		await sleep(2000)

		await driver.findElement(By.id('login_id')).sendKeys(process.env.ZOHO_EMAIL!)
		await sleep(2000)

		await driver.findElement(By.id('login_id')).sendKeys(Key.ENTER)
		await sleep(2000)

		await driver.findElement(By.id('password')).sendKeys(process.env.ZOHO_PASSWORD!)
		await sleep(2000)

		await driver.findElement(By.id('password')).sendKeys(Key.ENTER)
		await sleep(2000)

		const current_status = await driver.findElement(By.id('ZPD_Top_Att_Stat'))
		await sleep(2000)
		if ((await current_status.getText()).toLowerCase() === executionStatus.toLowerCase()) {
			console.log('executing:', executionStatus)
			await driver.findElement(By.css('.chlodIng')).click()
		}

		await sleep(1000)
		await printLogs(driver)

		await driver.close()
	} catch (err) {
		console.error(err)
		await printLogs(driver)

		await driver.close()
		await driver.quit()

		return
	}
}

run()
	.then(() => {
		console.log('Success!')
		process.exit(0)
	})
	.catch((err) => {
		console.log(err)
		process.exit(1)
	})

async function printLogs(driver: WebDriver) {
	await sleep(1000)
	const browserLogs = await driver.manage().logs().get('browser')
	const driverLogs = await driver.manage().logs().get('driver')
	const performanceLogs = await driver.manage().logs().get('performance')
	const logs: logging.Entry[] = [...browserLogs, ...driverLogs, ...performanceLogs]
	handleLogs(logs)
}
